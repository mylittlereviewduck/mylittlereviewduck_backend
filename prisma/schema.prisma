generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccountBlockTb {
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  blockerIdx String    @map("blocker_idx") @db.VarChar
  blockedIdx String    @map("blocked_idx") @db.VarChar
  blocker    AccountTb @relation("account_block_tb_blocker_idxToaccount_tb", fields: [blockerIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_account_block_tb")
  blocked    AccountTb @relation("account_block_tb_blocked_idxToaccount_tb", fields: [blockedIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_account_block_tb1")

  @@id([blockerIdx, blockedIdx], map: "account_block_tb_pk")
  @@map("account_block_tb")
}

model AccountTb {
  email                                               String             @db.VarChar
  pw                                                  String?            @db.VarChar
  nickname                                            String             @default(dbgenerated("uuid_generate_v4()")) @db.VarChar
  profile                                             String?
  provider                                            String             @db.VarChar
  providerKey                                         String?            @map("provider_key") @db.VarChar(100)
  createdAt                                           DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt                                           DateTime?          @map("deleted_at") @db.Timestamptz(6)
  idx                                                 String             @id(map: "account_tb_pk") @default(dbgenerated("uuid_generate_v4()")) @db.VarChar
  serialNumber                                        Int                @unique(map: "account_tb_serial_number_unique") @default(autoincrement()) @map("serial_number")
  interest1                                           String?            @map("interest_1") @db.VarChar(12)
  interest2                                           String?            @map("interest_2") @db.VarChar(12)
  suspensionCount                                     Int                @default(0) @map("suspension_count")
  isAdmin                                             Boolean            @default(false) @map("is_admin")
  suspendExpireAt                                     DateTime?          @map("suspend_expire_at") @db.Timestamptz(6)
  profileImg                                          String?            @map("profile_img") @db.VarChar
  reportCount                                         Int                @default(0) @map("report_count")
  blocker                                             AccountBlockTb[]   @relation("account_block_tb_blocker_idxToaccount_tb")
  blocked                                             AccountBlockTb[]   @relation("account_block_tb_blocked_idxToaccount_tb")
  commentLikeTb                                       CommentLikeTb[]
  commentTagTb                                        CommentTagTb[]
  commentTb                                           CommentTb[]
  fcmTokenTb                                          FcmTokenTb[]
  followings                                          FollowTb[]         @relation("follow_tb_follower_idxToaccount_tb")
  followers                                           FollowTb[]         @relation("follow_tb_following_idxToaccount_tb")
  loginUserTb                                         LoginUserTb?
  notificationTbNotificationTbSenderIdxToaccountTb    NotificationTb[]   @relation("notification_tb_sender_idxToaccount_tb")
  notificationTbNotificationTbRecipientIdxToaccountTb NotificationTb[]   @relation("notification_tb_recipient_idxToaccount_tb")
  opinionTb                                           OpinionTb[]
  reportTb                                            ReportTb[]
  reportTbReportTbReportedIdxToaccountTb              ReportTb[]         @relation("report_tb_reported_idxToaccount_tb")
  reviewBlockTb                                       ReviewBlockTb[]
  reviewBookmarkTb                                    ReviewBookmarkTb[]
  reviewDislikeTb                                     ReviewDislikeTb[]
  reviewLikeTb                                        ReviewLikeTb[]
  reviewShareTb                                       ReviewShareTb[]
  reviewTb                                            ReviewTb[]
  searchHistoryTb                                     SearchHistoryTb[]

  @@map("account_tb")
}

model CommentTb {
  idx            Int              @id @default(autoincrement())
  reviewIdx      Int              @map("review_idx")
  commentIdx     Int?             @map("comment_idx")
  content        String           @db.VarChar
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamptz(6)
  updatedAt      DateTime?        @map("updated_at") @db.Timestamptz(6)
  accountIdx     String           @map("account_idx") @db.VarChar
  commentLikeTb  CommentLikeTb[]
  commentTagTb   CommentTagTb[]
  accountTb      AccountTb        @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_comment_tb")
  reviewTb       ReviewTb         @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "fk_review_tb_to_comment_tb")
  notificationTb NotificationTb[]
  reportTb       ReportTb[]

  @@map("comment_tb")
}

model FollowTb {
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  followerIdx  String    @map("follower_idx") @db.VarChar
  followingIdx String    @map("following_idx") @db.VarChar
  follower     AccountTb @relation("follow_tb_follower_idxToaccount_tb", fields: [followerIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_follow_tb")
  following    AccountTb @relation("follow_tb_following_idxToaccount_tb", fields: [followingIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_follow_tb1")

  @@id([followerIdx, followingIdx], map: "follow_tb_pk")
  @@map("follow_tb")
}

model ReviewBlockTb {
  reviewIdx  Int       @map("review_idx")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  accountIdx String    @map("account_idx") @db.VarChar
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_review_block_tb")
  reviewTb   ReviewTb  @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "fk_review_tb_to_review_block_tb")

  @@id([reviewIdx, accountIdx], map: "review_block_tb_pk")
  @@map("review_block_tb")
}

model ReviewBookmarkTb {
  reviewIdx  Int       @map("review_idx")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  accountIdx String    @map("account_idx") @db.VarChar
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_bookmark_tb")
  reviewTb   ReviewTb  @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "fk_review_tb_to_bookmark_tb")

  @@id([reviewIdx, accountIdx], map: "review_bookmark_tb_pk")
  @@map("review_bookmark_tb")
}

model ReviewImgTb {
  idx       Int      @id @default(autoincrement())
  reviewIdx Int      @map("review_idx")
  imgPath   String   @map("img_path") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  content   String?  @db.VarChar
  reviewTb  ReviewTb @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "fk_review_tb_to_review_img_tb")

  @@index([reviewIdx], map: "review_idx")
  @@map("review_img_tb")
}

model ReviewShareTb {
  reviewIdx  Int       @map("review_idx")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  accountIdx String    @default(dbgenerated("uuid_generate_v4()")) @map("account_idx") @db.VarChar
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_review_share_tb")
  reviewTb   ReviewTb  @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "fk_review_tb_to_review_share_tb")

  @@id([reviewIdx, accountIdx], map: "review_share_tb_pk")
  @@map("review_share_tb")
}

model ReviewTb {
  idx              Int                @id @default(autoincrement())
  title            String             @db.VarChar(200)
  content          String
  viewCount        Int                @default(0) @map("view_count")
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamptz(6)
  updatedAt        DateTime?          @map("updated_at") @db.Timestamptz(6)
  score            Int
  accountIdx       String             @default(dbgenerated("uuid_generate_v4()")) @map("account_idx") @db.VarChar
  thumbnail        String?            @db.VarChar
  thumbnailContent String?            @map("thumbnail_content") @db.VarChar
  commentTb        CommentTb[]
  reportTb         ReportTb[]
  reviewBlockTb    ReviewBlockTb[]
  reviewBookmarkTb ReviewBookmarkTb[]
  reviewDislikeTb  ReviewDislikeTb[]
  reviewImgTb      ReviewImgTb[]
  reviewLikeTb     ReviewLikeTb[]
  reviewShareTb    ReviewShareTb[]
  accountTb        AccountTb          @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_review_tb")
  tagTb            TagTb[]

  @@map("review_tb")
}

model TagTb {
  idx       Int      @id @default(autoincrement())
  reviewIdx Int      @map("review_idx")
  tagName   String   @map("tag_name") @db.VarChar
  reviewTb  ReviewTb @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "fk_review_tb_to_tag_tb")

  @@index([reviewIdx], map: "review_idx_idx")
  @@map("tag_tb")
}

model ReviewDislikeTb {
  accountIdx String    @map("account_idx") @db.VarChar
  reviewIdx  Int       @map("review_idx")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade)
  reviewTb   ReviewTb  @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade)

  @@id([accountIdx, reviewIdx])
  @@map("review_dislike_tb")
}

model ReviewLikeTb {
  reviewIdx  Int       @map("review_idx")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  accountIdx String    @map("account_idx") @db.VarChar
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_review_likes_tb")
  reviewTb   ReviewTb  @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "fk_review_tb_to_review_likes_tb")

  @@id([reviewIdx, accountIdx], map: "review_likes_tb_pk")
  @@index([createdAt], map: "idx_review_like_created_at")
  @@map("review_like_tb")
}

model CommentLikeTb {
  commentIdx Int       @map("comment_idx")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  accountIdx String    @map("account_idx") @db.VarChar
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "fk_account_tb_to_comment_likes_tb")
  commentTb  CommentTb @relation(fields: [commentIdx], references: [idx], onDelete: Cascade, map: "fk_comment_tb_to_comment_likes_tb")

  @@id([commentIdx, accountIdx], map: "comment_likes_tb_pk")
  @@map("comment_like_tb")
}

model NotificationTb {
  recipientIdx       String             @map("recipient_idx") @db.VarChar
  senderIdx          String             @map("sender_idx") @db.VarChar
  type               Int
  reviewIdx          Int?               @map("review_idx")
  readAt             DateTime?          @map("read_at") @db.Timestamptz(6)
  createdAt          DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt          DateTime?          @map("deleted_at") @db.Timestamptz(6)
  content            String?            @db.VarChar
  idx                Int                @id(map: "notification_pkey") @default(autoincrement())
  commentIdx         Int?               @map("comment_idx")
  senderAccountTb    AccountTb          @relation("notification_tb_sender_idxToaccount_tb", fields: [senderIdx], references: [idx], onDelete: Cascade, map: "account_tb_to_notification_2")
  recipientAccounTb  AccountTb          @relation("notification_tb_recipient_idxToaccount_tb", fields: [recipientIdx], references: [idx], onDelete: Cascade, map: "account_tb_to_notification_fk_1")
  commentTb          CommentTb?         @relation(fields: [commentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "notification_tb_to_comment_fk")
  notificationTypeTb NotificationTypeTb @relation(fields: [type], references: [idx], onDelete: Cascade, map: "notification_type_to_notification")

  @@map("notification_tb")
}

model NotificationTypeTb {
  idx            Int              @id(map: "notification_type_pkey")
  typeName       String           @map("type_name") @db.VarChar
  notificationTb NotificationTb[]

  @@map("notification_type_tb")
}

model ReportTb {
  idx               Int          @id @default(autoincrement())
  reporterIdx       String       @map("reporter_idx") @db.VarChar
  reviewIdx         Int?         @map("review_idx")
  commentIdx        Int?         @map("comment_idx")
  createdAt         DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  type              Int
  content           String?      @db.VarChar(2000)
  deletedAt         DateTime?    @map("deleted_at") @db.Timestamptz(6)
  reportedIdx       String       @map("reported_idx") @db.VarChar
  accountTbReporter AccountTb    @relation(fields: [reporterIdx], references: [idx], onDelete: Cascade, map: "report_account_fk")
  commentTb         CommentTb?   @relation(fields: [commentIdx], references: [idx], onDelete: Cascade, map: "report_comment_fk")
  reportTypeTb      ReportTypeTb @relation(fields: [type], references: [idx], onDelete: Cascade, map: "report_report_type_fk")
  accountTbReported AccountTb    @relation("report_tb_reported_idxToaccount_tb", fields: [reportedIdx], references: [idx], onDelete: Cascade, map: "report_reported_account_fk")
  reviewTb          ReviewTb?    @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, map: "report_review_fk")

  @@map("report_tb")
}

model ReportTypeTb {
  idx      Int        @id
  typeName String     @map("type_name") @db.VarChar
  reportTb ReportTb[]

  @@map("report_type_tb")
}

model SearchHistoryTb {
  accountIdx String    @map("account_idx") @db.VarChar
  keyword    String    @db.VarChar
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade, map: "search_history_account_idx_fkey")

  @@id([accountIdx, keyword], map: "pk")
  @@index([createdAt], map: "search_history_created_at_idx")
  @@map("search_history_tb")
}

model CommentTagTb {
  idx        Int       @id @default(autoincrement())
  commentIdx Int       @map("comment_idx")
  accountIdx String    @map("account_idx") @db.VarChar
  accountTb  AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "comment_tag_tb_account_tb_fk")
  commentTb  CommentTb @relation(fields: [commentIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "comment_tag_tb_comment_tb_fk")

  @@map("comment_tag_tb")
}

model FcmTokenTb {
  accountIdx String?    @map("account_idx") @db.VarChar
  token      String     @id(map: "_pk") @db.VarChar
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  deviceIdx  String     @unique(map: "device_uq") @map("device_idx") @db.VarChar
  accountTb  AccountTb? @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "account_idx_fk")

  @@map("fcm_token_tb")
}

model EmailVerificaitonTb {
  email      String    @id(map: "email_pk") @db.VarChar
  code       Int
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  verifiedAt DateTime? @map("verified_at") @db.Timestamptz(6)

  @@map("email_verificaiton_tb")
}

model SearchKeywordTb {
  idx       Int      @id @default(autoincrement())
  keyword   String   @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("search_keyword_tb")
}

model LoginUserTb {
  accountIdx   String    @id @map("account_idx") @db.VarChar
  refreshToken String    @map("refresh_token") @db.VarChar
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  accountTb    AccountTb @relation(fields: [accountIdx], references: [idx], onDelete: Cascade)

  @@map("login_user_tb")
}

model LogTb {
  idx           Int      @id(map: "logs_pk") @default(autoincrement())
  method        String   @db.VarChar(10)
  url           String
  statusMessage String?  @map("status_message")
  statusCode    Int      @map("status_code")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  ip            String?  @db.VarChar
  userAgent     String?  @map("user_agent") @db.VarChar

  @@map("log_tb")
}

model OpinionTb {
  idx             Int             @id(map: "opinion_pkey") @default(autoincrement())
  accountIdx      String          @map("account_idx") @db.VarChar
  status          Int             @default(1)
  title           String          @db.VarChar
  content         String
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt       DateTime?       @map("deleted_at") @db.Timestamptz(6)
  accountTb       AccountTb       @relation(fields: [accountIdx], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "account_fk")
  opinionStatusTb OpinionStatusTb @relation(fields: [status], references: [idx], onDelete: NoAction, onUpdate: NoAction, map: "fk_status")

  @@map("opinion_tb")
}

model OpinionStatusTb {
  idx        Int         @id(map: "opinion_status_pkey")
  statusName String      @map("status_name") @db.VarChar
  opinionTb  OpinionTb[]

  @@map("opinion_status_tb")
}
